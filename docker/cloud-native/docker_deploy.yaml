version: "3"

services:
  node-exporter:
    image: prom/node-exporter:latest
    container_name: otel-node-exporter
    restart: always
    # restart: unless-stopped
    networks: ["net"]
    expose: [9100]
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  prometheus:
    image: prom/prometheus:main
    container_name: otel-prometheus
    restart: always
    user: ${USER_UID}:${USER_GID}
    networks: ["net"]
    ports: [8051:9090]
    volumes:
    # - ./configs:/prometheus/configs
    # - prometheus_data:/prometheus/data
    - ./configs:/app/configs:ro
    - ./data/prometheus:/app/data
    command:
    # - '--config.file=/etc/prometheus/prometheus.yaml'
    # - '--web.config.file=/app/configs/prometheus_web.yaml'
    - '--config.file=/app/configs/prometheus.yaml'
    - '--storage.tsdb.path=/app/data'
    - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    - '--web.console.templates=/usr/share/prometheus/consoles'
    - '--storage.tsdb.retention.time=15d'

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    restart: always
    user: ${USER_UID}:${USER_GID}
    volumes:
    # - ./configs:/otel-collector/configs
    - ./configs:/app/configs
    networks: ["net"]
    ports:
    # - "127.0.0.1:4317:4317"   # OTLP gRPC receiver
    # - "127.0.0.1:4318:4318" # http receiver
    # - "13133:13133" # health_check extension
    # - "1888:1888"   # pprof extension
    - "127.0.0.1:8888:8888"   # Prometheus metrics exposed by the collector
    - "127.0.0.1:8889:8889"   # Prometheus exporter metrics
    command: ["--config=/app/configs/otel-collector.yaml"]

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: otel-jaeger
    restart: always
    user: ${USER_UID}:${USER_GID}
    networks: ["net"]
    ports:
    - "8052:16686" # web
    # - "14250"       # expose to otel-collector
    # - "4317"        # accept OpenTelemetry Protocol (OTLP) over gRPC
    environment:
    - SPAN_STORAGE_TYPE=badger
    - BADGER_EPHEMERAL=false
    - BADGER_DIRECTORY_VALUE=/app/badger/data
    - BADGER_DIRECTORY_KEY=/app/badger/key
    volumes:
    - ./data/jaeger/badger:/app/badger

  # Independently deploy this service in production
  grafana:
    image: grafana/grafana:main
    container_name: otel-grafana
    restart: always
    user: ${USER_UID}:${USER_GID}
    networks: ["net"]
    ports: ["8053:3000"]
    volumes:
    - ./configs:/app/configs
    - ./data/grafana:/var/lib/grafana
    # environment:
    # - GF_SERVER_PROTOCOL=https
    # - GF_SERVER_CERT_FILE=/app/configs/server.pem
    # - GF_SERVER_CERT_KEY=/app/configs/server.key
    # - GF_SERVER_CERT_FILE=/var/lib/grafana/ssl/grafana.crt
    # - GF_SERVER_CERT_KEY=/var/lib/grafana/ssl/grafana.key
    # default: username=admin, password=admin

networks:
  net: { name: otel, driver: bridge, external: false }
