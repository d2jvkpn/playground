version: "3"

services:
  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    # restart: unless-stopped
    container_name: otel-node-exporter
    networks: ["net"]
    expose: [9100]
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  prometheus:
    image: prom/prometheus:main
    restart: always
    container_name: otel-prometheus
    user: 1000:1000
    networks: ["net", "demo-api_dev"]
    ports: [8051:9090]
    volumes:
    # - ./configs:/prometheus/configs
    # - prometheus_data:/prometheus/data
    - ./configs:/app/configs
    - ./data/prometheus:/app/data
    command:
    # - '--config.file=/etc/prometheus/prometheus.yaml'
    - '--config.file=/app/configs/prometheus_config.yaml'
    - '--web.config.file=/app/configs/prometheus_web.yaml'
    - '--storage.tsdb.path=/app/data'
    - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    - '--web.console.templates=/usr/share/prometheus/consoles'
    - '--storage.tsdb.retention.time=15d'

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    container_name: otel-jaeger
    networks: ["net"]
    # ports:
    # - "16686:16686" # web
    # - "14250"       # expose to otel-collector

  jaeger-auth:
    image: registry.cn-shanghai.aliyuncs.com/d2jvkpn/http-auth-proxy:dev
    restart: always
    user: 1000:1000
    container_name: otel-jaeger-auth
    depends_on: ["jaeger"]
    networks: ["net"]
    ports: ["8052:8052"]
    volumes:
    - ./configs/:/app/configs/
    - ./logs/:/app/logs/
    command: ["./target/main", "serve", "--config=/app/configs/jaeger_auth.yaml", "--addr=:8052"]

  opentelemetry-collector:
    image: otel/opentelemetry-collector:latest
    restart: always
    container_name: otel-collector
    volumes:
    # - ./configs:/otel-collector/configs
    - ./configs:/app/configs
    networks: ["net"]
    ports:
    - "4317:4317"   # OTLP gRPC receiver
    # - "13133:13133" # health_check extension
    # - "1888:1888"   # pprof extension
    # - "8888:8888"   # Prometheus metrics exposed by the collector
    # - "8889:8889"   # Prometheus exporter metrics
    command: ["--config=/app/configs/otel-collector.yaml"]

  # Independently deploy this service in production
  grafana:
    image: grafana/grafana:main
    restart: always
    container_name: grafana
    user: 1000:1000
    networks: ["net"]
    ports: ["8061:3000"]
    volumes:
    - ./data/grafana:/var/lib/grafana
    - ./configs:/app/configs
    # environment:
    # - GF_SERVER_PROTOCOL=https
    # - GF_SERVER_CERT_FILE=/app/configs/server.pem
    # - GF_SERVER_CERT_KEY=/app/configs/server.key
    # - GF_SERVER_CERT_FILE=/var/lib/grafana/ssl/grafana.crt
    # - GF_SERVER_CERT_KEY=/var/lib/grafana/ssl/grafana.key
    # default username: admin, password=admin

networks:
  net: { name: otel, driver: bridge, external: false }
  # grafana: { name: grafana, driver: bridge, external: true }
  demo-api_dev: { name: demo-api_dev, driver: bridge, external: true }
