apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: dev
  name: demo-web
  labels: { app: "demo-web" }
spec:
  replicas: 3
  selector:
    matchLabels: { app: "demo-web" }
  strategy:
    rollingUpdate: { maxSurge: 1, maxUnavailable: 0 }
    type: RollingUpdate
  template:
    metadata:
      labels: { app: "demo-web" }
    spec:
      restartPolicy: Always
      volumes:
      - name: config
        configMap: { name: demo-web }
      # - name: local
      #   hostPath: { path: "/data/local/demo-web", type: "DirectoryOrCreate" }
      - name: app-data
        persistentVolumeClaim: { claimName: "nfs" }
      containers:
      - name: demo-web
        image: registry.cn-shanghai.aliyuncs.com/d2jvkpn/demo-web:dev
        # IfNotPresent, Always, Never
        imagePullPolicy: "Always"
        #resources:
        #  requests: { cpu: "200m", memory: "128Mi" }
        #  limits: { cpu: "500m", memory: "256Mi" }
        livenessProbe:
          # HTTP Status >= 200 and < 400
          httpGet: { path: "/healthz", port: 5030 }
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        env:
        - name: POD_NAME
          valueFrom: { fieldRef: { apiVersion: "v1", fieldPath: "metadata.name" } }
        - { name: TZ, value: Asia/Shanghai }
        volumeMounts:
        - { name: config, mountPath: /opt/demo-web/configs/ } # not /opt/demo-web/configs/dev.yaml
        - { name: local, subPathExpr: "logs/$(POD_NAME)", mountPath: "/opt/demo-web/logs" }
        - { name: "app-data", subPathExpr: "demo-web/data/$(POD_NAME)", mountPath: "/opt/demo-web/data" }
        ports:
        - { name: "http", containerPort: 8080, protocol: "TCP" }
        # command: [ tail, -f, /etc/hosts ]
        command: [ "./main" ]
        args: [ "--addr=:8080", "--release" ]
