# https://doc.traefik.io/traefik/getting-started/quick-start-with-kubernetes/

--- # 00-role.yml: The first step is to create the role. The ClusterRole resource enumerates the resources and actions available for the role
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-role
rules:
- apiGroups: [""]
  resources: [services, secrets, nodes]
  verbs: [get, list, watch]
- apiGroups: [discovery.k8s.io]
  resources: [endpointslices]
  verbs: [list, watch]
- apiGroups: [extensions, networking.k8s.io]
  resources: [ingresses, ingressclasses]
  verbs: [get, list, watch]
- apiGroups: [extensions, networking.k8s.io]
  resources: [ingresses/status]
  verbs: [update]
- apiGroups: [traefik.io]
  resources:
  - middlewares
  - middlewaretcps
  - ingressroutes
  - traefikservices
  - ingressroutetcps
  - ingressrouteudps
  - tlsoptions
  - tlsstores
  - serverstransports
  - serverstransporttcps
  verbs: [get, list, watch]

--- # 00-account.yml: The next step is to create a dedicated service account for Traefik
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-account

--- # 01-role-binding.yml: bind the role on the account to apply the permissions and rules on the latter
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-role
subjects:
- kind: ServiceAccount
  name: traefik-account
  namespace: default # This tutorial uses the "default" K8s namespace

--- # 02-traefik.yml: To start Traefik on the Kubernetes cluster, a Deployment resource must exist to describe how to configure and scale containers horizontally to support larger workloads.
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-deployment
  labels: {app: traefik}
spec:
  replicas: 1
  selector:
    matchLabels: {app: traefik}
  template:
    metadata:
      labels: {app: traefik}
    spec:
      serviceAccountName: traefik-account
      containers:
        - name: traefik
          image: traefik:v3.2
          args: [--api.insecure, --providers.kubernetesingress]
          ports:
          - {name: web, containerPort: 80}
          - {name: dashboard, containerPort: 8080}

--- # 02-traefik-services.yml: A deployment manages scaling and then can create lots of containers, called Pods. Each Pod is configured following the spec field in the deployment. Given that, a Deployment can run multiple Traefik Proxy Pods, a piece is required to forward the traffic to any of the instance
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard-service
spec:
  type: LoadBalancer
  ports:
  - { port: 8080, targetPort: dashboard }
  selector: {app: traefik}

---
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-service
spec:
  type: LoadBalancer
  ports:
  - {targetPort: web, port: 80}
  selector: {app: traefik}
