# path: ~/apps/nginx/configs/nginx_app.conf

worker_processes 2;

events {
  worker_connections 1024;
}

http {
    log_format tsv
        'nginx\t'
        '$time_iso8601\t'
        '$request_id\t'
        '$http_host\t'
        '$remote_addr\t'
        '$request_length\t'
        '$request\t'
        '$status\t'
        '$request_time\t'
        '$body_bytes_sent\t'
        '$upstream_addr\t'
        '$remote_user\t'
        '$http_referer\t'
        '$http_user_agent';

    # https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
    # https://www.velebit.ai/blog/nginx-json-logging/

    log_format json escape=json '{'
        '"source":"nginx",'
        '"timestamp":"$time_iso8601",'
        '"request_id":"$request_id",'
        '"host":"$http_host",'
        '"remote_addr":"$remote_addr",'
        '"request_length":$request_length,'
        '"request":"$request",'
        '"status":$status,'
        '"request_time":$request_time,'
        '"resp_body_size":$body_bytes_sent,'
        '"upstream_addr":"$upstream_addr",'
        '"referer":"$http_referer",'
        '"user_agent":"$http_user_agent"'
    '}';

    # '"remote_user":"$remote_user",'

    include /path/to/nginx/configs/*.conf;
}

upstream service-a01 {
    least_conn;
    keepalive 16;
    server 127.0.0.1:8001 fail_timeout=60s max_fails=2 weight=3;
    server 127.0.0.1:8002 fail_timeout=60s max_fails=2 weight=1;
    server 127.0.0.1:8003 backup;
}

server {
    listen       80;
    server_name  ${DOMAIN};
    return       301 https://$server_name$request_uri;
}

server {
    listen         443 ssl http2;
    listen         [::]:443 ssl http2;
    server_name    ${DOMAIN};
    charset        utf-8;
    server_tokens  off;
    gzip           on;

    client_max_body_size     6114m; # 6GB
    client_body_buffer_size  16k;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log  /path/to/nginx/logs/app.log;
    error_log   /path/to/nginx/logs/app.error;

    #### ssl
    ssl_certificate           /path/to/nginx/certs/${DOMAIN}.cer;
    ssl_certificate_key       /path/to/nginx/certs/${DOMAIN}.key;
    ssl_session_cache         shared:SSL:1m;
    ssl_session_timeout       5m;
    ssl_protocols             TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;

    location /api {
        # proxy_pass  http://localhost:${PORT};
        pass_pass     http://service-a01;

        proxy_connect_timeout  600;
        proxy_send_timeout     600;
        proxy_read_timeout     600;
        send_timeout           600;

        proxy_set_header  Host               $http_host;   # required for docker client's sake
        proxy_set_header  X-Real-IP          $remote_addr; # pass on real client's IP
        proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto  $scheme; # http, https
        proxy_set_header  X-Request-Id       $request_id;
    }

    location /ws {
        # proxy_pass  http://localhost:${PORT};
        pass_pass     http://service-a01;

        proxy_http_version  1.1;
        proxy_read_timeout  86400; # 24h

        proxy_set_header  Host $host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Upgrade $http_upgrade; # websocket
        proxy_set_header  Connection "Upgrade";
    }

    if ($host != "${DOMAIN}") {
        return 404;
    }

    if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
        return 404;
    }

    if ($http_user_agent ~ (Windows|Win|Python|python|perl|Perl|Go|curl|Apache|-|client|Client)) {
        return 404;
    }

    if ( $request_method !~ ^(GET)$ ) {
        return 405;
    }
}
