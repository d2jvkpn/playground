http {
	log_format logger_tsv
		'nginx\t'
		'$time_iso8601\t'
		'$request_id\t'
		'$host\t'
		'$remote_addr\t'
		'$remote_user\t'
		'$request\t$status\t'
		'$body_bytes_sent\t'
		'$http_referer\t'
		'$http_user_agent\t'
		'$request_time';

	# https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
	# https://www.velebit.ai/blog/nginx-json-logging/

	log_format logger-json escape=json '{'
		'"source":"nginx",'
		'"timestamp":"$time_iso8601",'
		'"request_id":"$request_id",'
		'"host":"$http_host",'
		'"remote_addr":"$remote_addr",'
		'"request_length":$request_length,'
		'"request":"$request",'
		'"status":$status,'
		'"request_time":$request_time,'
		'"resp_body_size":$body_bytes_sent,'
		'"upstream_addr":"$upstream_addr",'
		'"remote_user":"$remote_user",'
		'"referer":"$http_referer",'
		'"user_agent":"$http_user_agent"'
	'}';

	include ${NGINX_Dir}/configs/*.conf;

	location ~ /ws/ {
		proxy_pass            http://TheService;
		proxy_set_header      Host $host;
		# websocket support
		proxy_http_version    1.1;
		proxy_set_header      Upgrade "websocket";
		proxy_set_header      Connection "Upgrade";
		proxy_read_timeout    86400;
	}
}

upstream app {
	server 127.0.0.1:${HTTP_Port};
}

server {
	listen       80;
	server_name  ${DOMAIN};
	return       301 https://$server_name$request_uri;
}

server {
	listen       443 ssl http2;
    listen       [::]:443 ssl http2;
	server_name    ${DOMAIN};
	charset        utf-8;
	server_tokens  off;
	gzip           on;
	client_max_body_size     6114m; # 6GB
	client_body_buffer_size  16k;

	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	access_log  ${NGINX_Dir}/logs/node-web.log;
	error_log   ${NGINX_Dir}/logs/node-web.error.log;

	#### ssl
	ssl_certificate      ${NGINX_Dir}/certs/${DOMAIN}.cer;
	ssl_certificate_key  ${NGINX_Dir}/certs/${DOMAIN}.key;
	ssl_session_cache    shared:SSL:1m;
	ssl_session_timeout  5m;
	ssl_ciphers          ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols        TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers  on;

	location /api {
		# proxy_pass          http://localhost:${PORT};
		pass_pass           http://app;
		proxy_set_header    Host               $http_host;   # required for docker client's sake
		proxy_set_header    X-Real-IP          $remote_addr; # pass on real client's IP
		proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
		proxy_set_header    X-Forwarded-Proto  $scheme;
		proxy_set_header    X-Request-Id       $request_id;
		proxy_connect_timeout  600;
		proxy_send_timeout     600;
		proxy_read_timeout     600;
		send_timeout           600;
	}

	location /ws {
		# proxy_pass          http://localhost:${PORT};
		pass_pass           http://app;
		proxy_set_header    Host $host;
		proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header    Upgrade $http_upgrade;
		proxy_set_header    Connection "Upgrade";
        proxy_http_version  1.1;
		proxy_read_timeout  86400;
	}

	if ($host != "${DOMAIN}") {
		return 404;
	}

	if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
		return 404;
	}

	if ( $request_method !~ ^(GET)$ ) {
		return 405;
	}
}
