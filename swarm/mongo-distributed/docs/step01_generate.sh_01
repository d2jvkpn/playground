#! /usr/bin/env bash
set -eu -o pipefail
_wd=$(pwd)
_path=$(dirname $0 | xargs -i readlink -f {})

mkdir -p configs scripts data/configsvr-{1..3}/{db,logs}
mkdir -p data/mongos-{1..3}/{db,logs}
mkdir -p data/shard-{1..3}{a..c}/{db,logs}

if [ ! -f configs/mongo_cluster.key ]; then
    openssl rand -base64 756 > configs/mongo_cluster.key
    chmod 600 configs/mongo_cluster.key
fi

#### configsvr
cat > scripts/configsvr.js <<EOF
// rs.status();

rs.initiate({
  _id: "configsvr",
  members: [
    { _id: 1, host: "mongo-configsvr-1:27017" },
    { _id: 2, host: "mongo-configsvr-2:27017" },
    { _id: 3, host: "mongo-configsvr-3:27017" },
  ],
});
EOF

cat > scripts/create-root.js <<EOF
db = connect('admin');

// db.getUsers({filter: {'user': 'root'}}).users.length == 0
try {
  db.createUser({user:"root", pwd: "root", roles: [{role: "root", db: "admin"}]});
} catch (err) {
  print ('==> can't create user:', err.message);
}

// db.auth("root", "root");
EOF

cat > configs/configsvr.conf <<EOF
storage:
  dbPath: /data/db
systemLog:
  destination: file
  logAppend: true
  path: /data/logs/mongo.log
net:
  port: 27017
  # bindIp: 127.0.0.1
replication:
  replSetName: configsvr
sharding:
  clusterRole: configsvr
security:
  authorization: enabled
  keyFile: /data/configs/mongo_cluster.key
EOF

#### shard
for shard in 1 2 3; do
cat > configs/shard-${shard}.conf <<EOF
storage:
  dbPath: /data/db
systemLog:
  destination: file
  logAppend: true
  path: /data/logs/mongo.log
net:
  port: 27017
  # bindIp: 127.0.0.1
replication:
  replSetName: shard-${shard}
sharding:
  clusterRole: shardsvr
security:
  authorization: enabled
  keyFile: /data/configs/mongo_cluster.key
EOF

cat > scripts/shard-${shard}.js <<EOF
rs.initiate({
  _id : "shard-${shard}",
  members: [
    { _id: 1, host: "mongo-shard-${shard}a:27017" },
    { _id: 2, host: "mongo-shard-${shard}b:27017" },
    { _id: 3, host: "mongo-shard-${shard}c:27017" },
  ]
});
EOF
done
# { _id: 1, host: "mongo-shard-${shard}a:27017", arbiterOnly: true }

#### mongos
for node in {1..3}; do
cat > configs/mongos-$node.conf <<EOF
systemLog:
  destination: file
  logAppend: true
  path: /data/logs/mongo.log
net:
  port: 27017
  bindIp: localhost,127.0.0.1,mongo-mongos-${node}
sharding:
  configDB: configsvr/mongo-configsvr-1:27017,mongo-configsvr-2:27017,mongo-configsvr-3:27017
security:
  keyFile: /data/configs/mongo_cluster.key
EOF
done

cat > scripts/mongos.js <<EOF
sh.addShard("shard-1/mongo-shard-1a:27017,mongo-shard-1b:27017,mongo-shard-1c:27017");
sh.addShard("shard-2/mongo-shard-2a:27017,mongo-shard-2b:27017,mongo-shard-2c:27017");
sh.addShard("shard-3/mongo-shard-3a:27017,mongo-shard-3b:27017,mongo-shard-3c:27017");
EOF

set -x
ls -1 configs/
ls -1 scripts/
